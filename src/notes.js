
// === === ===  Нововведения в ES6  === === === === === === === === === === === === === === === === ===

// == стрелочные функции ==
// == оператор spread для массивов (начиная с ES9 - и для объектов ==
// == деструктуризация ==
const obj = {
    subObject: {
        str: '',
        num: 5
    }
}
const {str, num} = obj.subObject;

// === === ===  Методы и свойства строк и чисел  === === === === === === === === === === === === === ===

const string = 'Пример какой-то строки';
string.toUpperCase()                            // вернуть строку с большими буквами
string.toLowerCase()                            // вернуть строку с маленькими буквами
string.indexOf('какой')                         // [7]: поиск подстроки, если подстрока не найдена - возвращает [-1]
string.slice(7, 15)                             // ['какой-то']: вырезает часть строки по индексу, последний индекс НЕ ВКЛЮЧИТЕЛЬНО.
                                                // если второй аргумент не указан - вырезается часть до конца строки.
                                                // если указать отрицательное значение, отсчет ведется с конца строки
string.substring(7,15)                          // ['какой-то']: почти как slice, не поддерживает отрицательные значения
string.substr(7,7)                  // ['какой-то']: вырезает часть строки по индексу и длине

const number = 12.2;
Math.round(number)                              //[12]: округление числа до ближайшего целого

const test = '12.2px';
parseInt(test)                                  // [12]: перевод строки в целое число
parseFloat(test)                                // [12]: перевод строки в число с плавающей точкой


// === === ===  Методы и свойства объектов  === === === === === === === === === === === === === === ===

const object = {
    string: 'some string',
    number: 22,
    toDelete: '',
    makeTest: function () { }                   // создание метода в объекте
}
for (let key in object) { }                     // перебор опций объекта
delete object.toDelete;                         // позволяет удалить элемент из объекта
Object.keys(object)                             // создает массив из ключей объекта
Object.assign(object, obj)                      // объединить два объекта

// !!!!!!!!!!
// Рассмотреть передачу по ссылке и по значению, копии объектов
// !!!!!!!!!!


// === === ===  Методы массивов  === === === === === === === === === === === === === === === === === ===

const array = [1, 2, 3, 6, 8]

array.pop();                                    // удаляет последний элемент из массива и возвращает его
array.push(10);                                 // добавляет элемент в конец массива
for (let value of array) { }                    // перебор значений массива, работает break и continue
array.forEach(function (                        // перебор значений массива и применение функции к каждому элементу
    item,                               // значеение элемента
    index,                              // индекс элемента
    array) {                           // ссылка на массив

})
array.map(a => {})                             // перебирает и модифициррует элементы, возвращая новый массив
//array.filter()                               // отфильтровываем массив по заданному критерию
const split = string.split(' ')        // превращает строку в массив по разделителю
split.join('_')                                // превращает массив в строку по разделителю
array.sort()                                   // сортировка элементов массива (как строк, по первым символам)
// http://algolist.ru/sort/quick_sort.php      // инфо про алгоритм быстрой сортировки
function compareNum(a, b) {
    return a - b;
}
array.sort(compareNum)                         // для правильной сортировки чисел
array.slice()                                  // создать поверхностную копию массива

// Псевдомассивы - выглядят как массивы, но не имеют их методов


console.log()
